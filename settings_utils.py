import aiosqlite
from aiogram import types
from typing import Optional

# –ü—É—Ç—å –∫ SQLite –±–∞–∑–µ
DB_PATH = "tg_users.db"

# –ü—É—Ç—å –∫ SQLite –±–∞–∑–µ\ DB_PATH = "tg_users.db"

async def set_pending(tg_user: int, field: Optional[str]):
    """
    –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è tg_user —Å–µ–π—á–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–ª—è –ø–æ–ª—è field.
    –î–ª—è —Å–±—Ä–æ—Å–∞ –ø–µ—Ä–µ–¥–∞–π—Ç–µ field=None.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR REPLACE INTO user_settings (tg_user, key, value) VALUES (?, ?, ?)",
            (tg_user, "pending", field)
        )
        await db.commit()

async def get_pending(tg_user: int) -> Optional[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ pending-–ø–æ–ª–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT value FROM user_settings WHERE tg_user = ? AND key = 'pending'",
            (tg_user,)
        ) as cursor:
            row = await cursor.fetchone()
            return row[0] if row else None

async def save_user_setting(tg_user: int, key: str, value: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª—é–±–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ñ–∏–ª—å—Ç—Ä) –ø–æ –∫–ª—é—á—É key.
    –ü—Ä–∏–º–µ—Ä key: 'region', 'salary', 'work_format', 'employment_type', 'keyword', 'prompt'.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR REPLACE INTO user_settings (tg_user, key, value) VALUES (?, ?, ?)",
            (tg_user, key, value)
        )
        await db.commit()

async def get_user_setting(tg_user: int, key: str) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É key.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT value FROM user_settings WHERE tg_user = ? AND key = ?",
            (tg_user, key)
        ) as cursor:
            row = await cursor.fetchone()
            return row[0] if row else None


def build_main_menu_keyboard() -> types.InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    rows = [
        [
            types.InlineKeyboardButton(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data="open_settings"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üìÑ –†–µ–∑—é–º–µ", callback_data="open_resumes"
            )
        ],
        [
            types.InlineKeyboardButton(
                text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤", callback_data="show_filters"
            )
        ],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=rows)


def build_settings_keyboard(with_back: bool = True) -> types.InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    rows = [
        [
            types.InlineKeyboardButton(
                text="–†–µ–≥–∏–æ–Ω", callback_data="filter_region"
            ),
            types.InlineKeyboardButton(
                text="–ì—Ä–∞—Ñ–∏–∫", callback_data="filter_schedule"
            ),
        ],
        [
            types.InlineKeyboardButton(
                text="–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã", callback_data="filter_work_format"
            ),
            types.InlineKeyboardButton(text="–ó–ü", callback_data="filter_salary"),
        ],
        [
            types.InlineKeyboardButton(
                text="–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏", callback_data="filter_employment_type"
            ),
            types.InlineKeyboardButton(
                text="–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="filter_keyword"
            ),
        ],
    ]
    if with_back:
        rows.append(
            [
                types.InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_menu"
                )
            ]
        )
    return types.InlineKeyboardMarkup(inline_keyboard=rows)
