from contextlib import asynccontextmanager
from dotenv import load_dotenv

load_dotenv()

from fastapi import FastAPI, Request, Query
from fastapi.responses import RedirectResponse
from hh_api import HHClient
from chatgpt_client import ChatGPTClient
import os
import json
import httpx
from tg_bridge import send_vacancy
# --- –ö–ª–∏–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∑–¥–µ—Å—å ---

# –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ö–æ–¥ –∑–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–†–ò –ó–ê–ü–£–°–ö–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã...")
    client_id = os.getenv('HH_CLIENT_ID')
    client_secret = os.getenv('HH_CLIENT_SECRET')
    redirect_uri = os.getenv('HH_REDIRECT_URI')

    # –°–æ–∑–¥–∞–µ–º –∏ "—Å–∫–ª–∞–¥—ã–≤–∞–µ–º" –∫–ª–∏–µ–Ω—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.state.hh_client = HHClient(client_id=client_id, client_secret=client_secret, redirect_uri=redirect_uri)
    app.state.gpt_client = ChatGPTClient()
    print("–ö–ª–∏–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

    yield  # –í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã

    # –ö–æ–¥ –ø–æ—Å–ª–µ yield –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–†–ò –û–°–¢–ê–ù–û–í–ö–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –±—ã –∫–ª–∏–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–ª–∏
    print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.")


# –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –≤ FastAPI
app = FastAPI(lifespan=lifespan)


# --- –û–ë–ù–û–í–ò–¢–ï –í–ê–®–ò –≠–ù–î–ü–û–ò–ù–¢–´, –ß–¢–û–ë–´ –ë–†–ê–¢–¨ –ö–õ–ò–ï–ù–¢–´ –ò–ó request.app.state ---

@app.get('/')
def index(request: Request):
    # –ü–æ–ª—É—á–∞–µ–º hh_client –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    hh_client = request.app.state.hh_client
    auth_url = hh_client.get_authorize_url()
    return RedirectResponse(auth_url)


@app.get("/callback")
async def callback(request: Request):
    code  = request.query_params.get("code")
    state = int(request.query_params.get("state"))   # ‚Üê tg_user

    hh_client = request.app.state.hh_client
    token = await hh_client.fetch_token(code)

    # 1) –∑–∞–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
    resumes = await hh_client.get_my_resumes(token)
    first_pub = next((r for r in resumes["items"]
                      if r["access"] == "PUBLIC"), None)
    resume_id = first_pub["id"] if first_pub else None

    # 2) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with aiosqlite.connect("tg_users.db") as db:
        await db.execute("""INSERT OR REPLACE INTO user_tokens
                            (tg_user, access_token, refresh_token, resume_id)
                            VALUES (?,?,?,?)""",
                         (state,
                          token["access_token"],
                          token.get("refresh_token"),
                          resume_id))
        await db.commit()

    return {"status": "authorized", "resume": resume_id}


@app.get('/search')
async def search(request: Request, text: str = Query(..., description="–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π")):
    # –ü–æ–ª—É—á–∞–µ–º hh_client –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    hh_client = request.app.state.hh_client
    token = json.load(open('token.json'))['access_token']
    items = await hh_client.search_vacancies(token, text=text)
    return {
        "found": len(items),
        "items": items
    }

@app.get("/resumes")
async def get_resumes(request: Request):
    try:
        hh_client = request.app.state.hh_client
        token = json.load(open('token.json'))['access_token']
        resumes = await hh_client.get_my_resumes(token)
        return resumes
    except Exception as e:
        return {"error": str(e)}

@app.post('/auto_reply')
async def auto_reply(request: Request):
    hh_client = request.app.state.hh_client
    gpt_client = request.app.state.gpt_client
    token = json.load(open('token.json'))['access_token']

    # –ñ–µ—Å—Ç–∫–æ —É–∫–∞–∂–µ–º ID —Ç–≤–æ–µ–≥–æ —Ä–µ–∑—é–º–µ (–ø–æ—Ç–æ–º —Å–¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä)
    resume_id = "85b0ac5aff0f05ef8b0039ed1f507165623145"

    # –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–ª—é—á—É
    vacancies = await hh_client.search_vacancies(token, text="python")

    results = []

    MAX_REPLIES = 10

    for vacancy in vacancies[:MAX_REPLIES]:
        # 1) –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ç–µ—Å—Ç–æ–º
        if vacancy.get("has_test"):
            print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –≤–∞–∫–∞–Ω—Å–∏—é —Å —Ç–µ—Å—Ç–æ–º {vacancy['id']}")
            continue

        vacancy_id = vacancy["id"]
        title = vacancy.get("name")
        url = vacancy.get("alternate_url")

        # 2) –®–ª—ë–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ Telegram  üëà –í–û–¢ –°–Æ–î–ê
        await send_vacancy(title, url)

        print(f"‚Üí –ü—Ä–æ–±—É—é –æ—Ç–∫–ª–∏–∫ –Ω–∞ ¬´{title}¬ª ({vacancy_id})")

        # 3) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∏—Å—å–º–æ-–∑–∞–≥–ª—É—à–∫—É
        description = vacancy["snippet"].get("requirement") or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        message = await gpt_client.generate_cover_letter(
            description,
            "–ú–æ–π –æ–ø—ã—Ç –≤ Python-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
        )

        # 4) –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
        try:
            code = await hh_client.respond_to_vacancy(
                token, resume_id, vacancy_id, message
            )
            results.append({"vacancy_id": vacancy_id, "status": code})
        except httpx.HTTPStatusError as e:
            err_text = e.response.text
            print("‚ÄºÔ∏è HH error:", err_text)
            results.append({"vacancy_id": vacancy_id, "error": err_text})

    return {"results": results}

# DEBUG: –≤—ã–≤–µ–¥–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
for route in app.routes:
    print(route.path, route.methods)

if __name__ == '__main__':
    import uvicorn
    uvicorn.run(app, host='0.0.0.0', port=8000)